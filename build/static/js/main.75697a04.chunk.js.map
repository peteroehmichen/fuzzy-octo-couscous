{"version":3,"sources":["Users.js","InnerFrame.js","Edit.js","Summary.js","App.js","index.js"],"names":["Users","props","useState","allUsers","setAllUsers","name","setName","useEffect","localData","JSON","parse","localStorage","getItem","Object","keys","error","console","log","message","className","id","defaultValue","onChange","e","target","value","disabled","map","user","i","type","placeholder","onClick","includes","storage","setItem","stringify","selectName","InnerFrame","children","label","activeTab","setActiveTab","SelectActiveTab","innerText","tab","find","Edit","logs","setLogs","lineEdit","setLineEdit","lineDelete","setLineDelete","blockOtherEdits","setBlockOtherEdits","updatedStart","setUpdatedStart","updatedEnd","setUpdatedEnd","prevStorage","noData","startButton","newLogs","unshift","start","Date","now","endButton","end","length","format","index","newStart","newEnd","valueOf","editLog","splice","deleteEntry","Summary","formatDefinition","mode","tempData","finalData","forEach","entry","temp","differenceInHours","element","push","hours","sort","a","b","ResponsiveContainer","width","height","BarChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","App","withUserNavigation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75697a04.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\n\nexport default function Users(props) {\n    const [allUsers, setAllUsers] = useState([]);\n    const [name, setName] = useState();\n\n    useEffect(() => {\n        try {\n            const localData = JSON.parse(localStorage.getItem(\"timeLogs\"));\n            setAllUsers(Object.keys(localData));\n        } catch (error) {\n            console.log(\"No Data in Local Storage\", error.message);\n        }\n    }, []);\n\n    function confirmName() {\n        try {\n            if (!allUsers.includes(name)) {\n                const storage =\n                    JSON.parse(localStorage.getItem(\"timeLogs\")) || {};\n                storage[name] = null;\n                localStorage.setItem(\"timeLogs\", JSON.stringify(storage));\n            }\n            props.selectName(name);\n        } catch (error) {\n            console.log(\"received an error while updating LS:\", error.message);\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"title\">\n                <h1>Zeiterfassung</h1>\n                <h3>Bitte wähle einen Nutzer</h3>\n            </div>\n            <div className=\"user-body\">\n                <p>Bestehende Nutzer</p>\n                <select\n                    id=\"existing\"\n                    defaultValue=\"choose\"\n                    onChange={(e) => {\n                        setName(e.target.value);\n                    }}\n                >\n                    <option disabled value=\"choose\">\n                        Bitte auswählen...\n                    </option>\n                    {allUsers &&\n                        allUsers.map((user, i) => {\n                            return (\n                                <option value={user} key={i}>\n                                    {user}\n                                </option>\n                            );\n                        })}\n                </select>\n                <p>oder erstelle einen neuen Nutzer</p>\n                <input\n                    type=\"text\"\n                    name=\"newUser\"\n                    placeholder=\"Dein Name\"\n                    onChange={(e) => {\n                        setName(e.target.value);\n                    }}\n                />\n                <button onClick={confirmName}>Submit</button>\n            </div>\n        </Fragment>\n    );\n}\n","import { useState } from \"react\";\n\nexport default function InnerFrame(props) {\n    const [activeTab, setActiveTab] = useState(props.children[0].props.label);\n    const SelectActiveTab = (e) => {\n        setActiveTab(e.target.innerText);\n    };\n\n    return (\n        <div className=\"frame\">\n            <div className=\"tabs\">\n                {props.children.map((tab, i) => {\n                    return (\n                        <div\n                            className={`tab ${\n                                activeTab === tab.props.label ? \"active\" : \"\"\n                            }`}\n                            key={i}\n                            onClick={SelectActiveTab}\n                        >\n                            {tab.props.label}\n                        </div>\n                    );\n                })}\n            </div>\n            {props.children.find((tab) => tab.props.label === activeTab)}\n        </div>\n    );\n}\n","import { Fragment, useEffect, useState } from \"react\";\nimport { format } from \"date-fns\";\n\nexport default function Edit(props) {\n    const [logs, setLogs] = useState();\n    const [lineEdit, setLineEdit] = useState({});\n    const [lineDelete, setLineDelete] = useState({});\n    const [blockOtherEdits, setBlockOtherEdits] = useState(false);\n    const [updatedStart, setUpdatedStart] = useState();\n    const [updatedEnd, setUpdatedEnd] = useState();\n\n    useEffect(() => {\n        try {\n            setLogs(JSON.parse(localStorage.getItem(\"timeLogs\"))[props.user]);\n        } catch (error) {\n            console.log(\"could not read LS:\", error.message);\n        }\n    }, [props.user]);\n\n    useEffect(() => {\n        try {\n            const prevStorage = JSON.parse(localStorage.getItem(\"timeLogs\"));\n            prevStorage[props.user] = logs;\n            localStorage.setItem(\"timeLogs\", JSON.stringify(prevStorage));\n        } catch (error) {\n            console.log(\"could not access LS:\", error.message);\n        }\n    }, [props.user, logs]);\n\n    const noData = <p>No previous entries found</p>;\n\n    function logStart() {\n        const newLogs = logs ? [...logs] : [];\n        newLogs.unshift({ start: Date.now() });\n        setLogs(newLogs);\n    }\n\n    function logEnd() {\n        const newLogs = [...logs];\n        newLogs[0].end = Date.now();\n        setLogs(newLogs);\n    }\n\n    function deleteEntry(index) {\n        const newLogs = [...logs];\n        newLogs.splice(index, 1);\n        setLogs(newLogs);\n    }\n\n    function editLog(index) {\n        const newStart = updatedStart ? new Date(updatedStart) : false;\n        const newEnd = updatedEnd ? new Date(updatedEnd) : false;\n        const newLogs = [...logs];\n        if (newStart) {\n            newLogs[index].start = newStart.valueOf();\n        }\n        if (newEnd) {\n            newLogs[index].end = newEnd.valueOf();\n        }\n\n        setLogs(newLogs);\n    }\n\n    const startButton = (\n        <button className=\"start-stop\" onClick={logStart}>\n            <p>🟢</p>\n            <h3>Starte eine neue Zeiterfassung</h3>\n        </button>\n    );\n    const endButton = (\n        <button className=\"start-stop\" onClick={logEnd}>\n            <p>🛑</p>\n            <h3>Beende die aktuelle Zeiterfassung</h3>\n        </button>\n    );\n\n    return (\n        <div className=\"sections\">\n            <div>\n                {(!logs || !logs.length) && startButton}\n                {logs && logs[0]?.end && startButton}\n                {logs && logs[0]?.start && !logs[0]?.end && endButton}\n            </div>\n            <h3>Bisher erfasste Zeiten</h3>\n            <div className=\"times-table\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th>Start</th>\n                            <th>End</th>\n                            <th>Funktionen</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {logs &&\n                            logs.map((log, i) => {\n                                return (\n                                    <tr key={i}>\n                                        <td>{i + 1})</td>\n                                        <td>\n                                            {!lineEdit[i] &&\n                                                format(\n                                                    log.start,\n                                                    \"dd.MM.yyyy', um 'HH:mm' Uhr'\"\n                                                )}\n                                            {lineEdit[i] && (\n                                                <input\n                                                    type=\"datetime-local\"\n                                                    name=\"start\"\n                                                    value={format(\n                                                        log.start,\n                                                        \"yyy-MM-dd'T'HH:mm\"\n                                                    )}\n                                                    onChange={(e) => {\n                                                        setUpdatedStart(\n                                                            e.target.value\n                                                        );\n                                                    }}\n                                                />\n                                            )}\n                                        </td>\n                                        <td>\n                                            {!lineEdit[i] &&\n                                                log.end &&\n                                                format(\n                                                    log.end,\n                                                    \"dd.MM.yyyy', um 'HH:mm' Uhr'\"\n                                                )}\n                                            {lineEdit[i] && log.end && (\n                                                <input\n                                                    type=\"datetime-local\"\n                                                    name=\"start\"\n                                                    value={format(\n                                                        log.end,\n                                                        \"yyy-MM-dd'T'HH:mm\"\n                                                    )}\n                                                    onChange={(e) => {\n                                                        setUpdatedEnd(\n                                                            e.target.value\n                                                        );\n                                                    }}\n                                                />\n                                            )}\n                                        </td>\n                                        <td>\n                                            {!lineEdit[i] && (\n                                                <button\n                                                    disabled={blockOtherEdits}\n                                                    onClick={() => {\n                                                        setLineEdit({\n                                                            ...lineEdit,\n                                                            [i]: true,\n                                                        });\n                                                        setBlockOtherEdits(\n                                                            true\n                                                        );\n                                                    }}\n                                                >\n                                                    Bearbeiten\n                                                </button>\n                                            )}\n                                            {lineEdit[i] && (\n                                                <Fragment>\n                                                    <button\n                                                        onClick={() => {\n                                                            setLineEdit({\n                                                                ...lineEdit,\n                                                                [i]: false,\n                                                            });\n                                                            setBlockOtherEdits(\n                                                                false\n                                                            );\n                                                            setUpdatedEnd();\n                                                            setUpdatedStart();\n                                                        }}\n                                                    >\n                                                        {\" \"}\n                                                        Abbrechen\n                                                    </button>\n                                                    <button\n                                                        onClick={() => {\n                                                            setBlockOtherEdits(\n                                                                false\n                                                            );\n                                                            setLineEdit({\n                                                                ...lineEdit,\n                                                                [i]: false,\n                                                            });\n                                                            editLog(i);\n                                                        }}\n                                                    >\n                                                        Speichern\n                                                    </button>\n                                                </Fragment>\n                                            )}\n                                        </td>\n                                        <td>\n                                            {!lineDelete[i] && (\n                                                <button\n                                                    disabled={blockOtherEdits}\n                                                    onClick={() => {\n                                                        setLineDelete({\n                                                            ...lineDelete,\n                                                            [i]: true,\n                                                        });\n                                                        setBlockOtherEdits(\n                                                            true\n                                                        );\n                                                    }}\n                                                >\n                                                    Löschen\n                                                </button>\n                                            )}\n                                            {lineDelete[i] && (\n                                                <Fragment>\n                                                    <button\n                                                        onClick={() => {\n                                                            setLineDelete({\n                                                                ...lineDelete,\n                                                                [i]: false,\n                                                            });\n                                                            setBlockOtherEdits(\n                                                                false\n                                                            );\n                                                        }}\n                                                    >\n                                                        Abbrechen\n                                                    </button>\n                                                    <button\n                                                        onClick={() => {\n                                                            // TODO edit and save!\n                                                            setBlockOtherEdits(\n                                                                false\n                                                            );\n                                                            setLineDelete({\n                                                                ...lineDelete,\n                                                                [i]: false,\n                                                            });\n                                                            deleteEntry(i);\n                                                        }}\n                                                    >\n                                                        Löschen\n                                                    </button>\n                                                </Fragment>\n                                            )}\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                    </tbody>\n                </table>\n                {!logs && noData}\n            </div>\n        </div>\n    );\n}\n\n// TODO (1) Erstellen Sie ein Formular zum Erfassen von Arbeitszeiten. Das kann entweder als „Start / Stopp“-Knopf zum Tracken eines Logs oder über ein Formular mit Start-Zeit und End-Zeit geschehen.\n","import { useEffect, useState } from \"react\";\nimport { format, differenceInHours, parse } from \"date-fns\";\n\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from \"recharts\";\n\nexport default function Summary(props) {\n    const [logs, setLogs] = useState();\n\n    useEffect(() => {\n        try {\n            setLogs(JSON.parse(localStorage.getItem(\"timeLogs\"))[props.user]);\n        } catch (error) {\n            console.log(\"could not read LS:\", error.message);\n        }\n    }, [props.user]);\n\n    const formatDefinition = props.mode === \"daily\" ? \"dd.MM.yyyy\" : \"MM/yyyy\";\n    const tempData = {};\n    const finalData = [];\n    if (logs) {\n        logs.forEach((entry) => {\n            let temp = format(entry.end, formatDefinition);\n            if (tempData[temp]) {\n                tempData[temp] += differenceInHours(entry.end, entry.start);\n            } else {\n                tempData[temp] = differenceInHours(entry.end, entry.start);\n            }\n        });\n        for (const element of Object.keys(tempData)) {\n            finalData.push({ name: element, hours: tempData[element] });\n        }\n        finalData.sort((a, b) => {\n            return (\n                parse(b.name, formatDefinition, new Date()) -\n                parse(a.name, formatDefinition, new Date())\n            );\n        });\n    }\n\n    return (\n        <div className=\"sections\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart\n                    width={500}\n                    height={300}\n                    data={finalData}\n                    margin={{\n                        top: 5,\n                        right: 30,\n                        left: 20,\n                        bottom: 5,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"hours\" fill=\"#82ca9d\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    );\n}\n","import Users from \"./Users\";\nimport { useState } from \"react\";\nimport InnerFrame from \"./InnerFrame\";\nimport Edit from \"./Edit\";\nimport Summary from \"./Summary\";\n\nfunction App() {\n    const [name, setName] = useState(\"\");\n\n    const withUserNavigation = (\n        <div className=\"inner-header\">\n            <div>\n                <b>Aktiver Nutzer: {name}</b>\n            </div>\n            <div\n                onClick={() => {\n                    setName(false);\n                }}\n            >\n                ❌\n            </div>\n        </div>\n    );\n\n    return (\n        <div className=\"App\">\n            {!name && <Users selectName={setName} />}\n            {name && withUserNavigation}\n            {name && (\n                <InnerFrame>\n                    <Edit label=\"Zeiten hinzufügen / bearbeiten\" user={name} />\n                    <Summary\n                        label=\"Arbeitszeiten pro Tag\"\n                        user={name}\n                        mode=\"daily\"\n                    />\n                    <Summary\n                        label=\"Arbeitszeiten pro Monat\"\n                        user={name}\n                        mode=\"monthly\"\n                    />\n                </InnerFrame>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}